Test cases for 2-matrix_divided module
======================================

This module provides a function to divide all elements of a matrix by a number

Import the function:
    >>> matrix_divided = __import__('2-matrix_divided').matrix_divided

Test basic division with integers:
    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> matrix_divided(matrix, 3)
    [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]
    >>> matrix
    [[1, 2, 3], [4, 5, 6]]

Test division with floats:
    >>> matrix_divided([[1.1, 2.2], [3.3, 4.4]], 2)
    [[0.55, 1.1], [1.65, 2.2]]

Test division with negative numbers:
    >>> matrix_divided([[1, 2], [3, 4]], -2)
    [[-0.5, -1.0], [-1.5, -2.0]]

Test for TypeError when matrix is not a list of lists:
    >>> matrix_divided("not a matrix", 2)
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats
    
    >>> matrix_divided([1, 2, 3], 2)
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats
    
    >>> matrix_divided([[1, 2], ["string", 4]], 2)
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Test for TypeError when rows have different sizes:
    >>> matrix_divided([[1, 2, 3], [4, 5]], 2)
    Traceback (most recent call last):
    ...
    TypeError: Each row of the matrix must have the same size

Test for TypeError when div is not a number:
    >>> matrix_divided([[1, 2], [3, 4]], "string")
    Traceback (most recent call last):
    ...
    TypeError: div must be a number

Test for ZeroDivisionError when div is zero:
    >>> matrix_divided([[1, 2], [3, 4]], 0)
    Traceback (most recent call last):
    ...
    ZeroDivisionError: division by zero

Test with empty matrix:
    >>> matrix_divided([], 2)
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Test with empty rows:
    >>> matrix_divided([[], []], 2)
    [[], []]
